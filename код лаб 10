#include <queue>
#include <iostream>
#include <locale>
using namespace std;

void BFS(int* (*mass), int* be, int pos, int n)
{
	queue <int> q;
	q.push(pos);
	be[pos] = 0;
	while (!q.empty())
	{
		pos = q.front();
		printf("%d ", pos + 1);
		q.pop();
		for (int i = 0; i < n; i++)
		{
			if (mass[pos][i] != 0 && be[i] == -1)
			{
				q.push(i);
				be[i] = be[pos] + mass[pos][i];
			}
		}
	}
}

int main()
{
	setlocale(LC_ALL, "Rus");
	int** a, n;
	int i = 0, j = 0, w;
	printf("Введите кол-во строк и столбцов\n");
	scanf_s("%d", &n);
	a = (int**)malloc(n * sizeof(int*));
	for (int i = 0; i < n; i++)
	{
		a[i] = (int*)malloc(n * sizeof(int));
	}
	for (int i = 0; i < n; i++)
	{
		for (int j = i; j < n; j++)
		{
			/*w = rand() % 2;
			if (w == 1)
			{
				a[i][j] = rand() % 10;
				a[j][i] = a[i][j];
			}
			else {
				a[i][j] = 0;
				a[j][i] = a[i][j];
			}
			if (i == j)
			{
				a[i][j] = 0;
			}*/
			if (i == j) { a[i][j] = 0; }
			else
			{
				a[i][j] = rand() % 6;
				a[j][i] = a[i][j];
			}
		}
	}

	for (int i = 0; i < n + 1; i++)
	{
		for (int j = 0; j < n + 1; j++)
		{
			if (i == 0 && j == 0)
			{
				printf("#  ");
			}
			else
			{
				if (i == 0 || j == 0)
				{
					if (i == 0) { printf("%d  ", j); }
					else { printf("%d  ", i); }
				}
				else
				{
					printf("%d  ", a[i - 1][j - 1]);
				}
			}
		}
		printf("\n");
	}

	int pos = 0;
	int* be = (int*)malloc(n * sizeof(int));
	for (int i = 0; i < n; i++)
	{
		be[i] = -1;
	}
	for (i = 0; i < n; i++)
	{
		if (be[i] == -1)
		{
			printf("Введите вершину\n");
			scanf_s("%d", &pos);
			BFS(a, be, pos - 1, n);
		}
	}
	printf("\n");
	for (int i = 0; i < n; i++)
	{
		printf("расстояние от %d до %d = %d\n", pos, i + 1, be[i]);
	}
	int max = 0, min = 10;
	for (int i = 0; i < n; i++)
	{
		if (max < be[i])
		{
			max = be[i];
		}
		else if(min > be[i] && be[i] > 0)
		{
			min = be[i];
		}
	}
    printf("диаметр = %d\n", max);
	printf("радиус = %d\n", min);
	printf("Периферийные вершины: ");
	for (int i = 0; i < n; i++) {
		if (be[i] == max) {
			printf("%d ", i + 1);
		}
	}
	printf("\n");
	printf("Центральные вершины: ");
	for (int i = 0; i < n; i++) {
		if (be[i] == min) {
			printf("%d ", i + 1);
		}
	}
	free(a);
	getchar();
	getchar();
}
